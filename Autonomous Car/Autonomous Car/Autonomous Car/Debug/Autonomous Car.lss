
Autonomous Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  0000061c  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000a4  008000a4  000006f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001690  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b42  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf4  00000000  00000000  00002a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  00003a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a23  00000000  00000000  00003f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000049bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 0c 03 	jmp	0x618	; 0x618 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Reg_int>:

extern distance;      //Variable take output of Sensor

void Reg_int()        //Initialize Registers
{
	init_servo();     //Initialization of servo motor
  92:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <init_servo>
	lcd_init();       //Initialization of LCD
  96:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_init>
	init_Motor();     //Initialization of Motors
  9a:	0e 94 ce 00 	call	0x19c	; 0x19c <init_Motor>
	ultrasonic_init();//Initialization of UltraSonic Sensor
  9e:	0e 94 26 02 	call	0x44c	; 0x44c <ultrasonic_init>
	setbit(DDRD,5);   //out of servo
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	81 bb       	out	0x11, r24	; 17
	setbit(DDRD,7);   //out of Osc 1
  a8:	81 b3       	in	r24, 0x11	; 17
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	81 bb       	out	0x11, r24	; 17
    ultra_triger();   //Trigger Sensor
  ae:	0e 94 34 02 	call	0x468	; 0x468 <ultra_triger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e4       	ldi	r24, 0x4F	; 79
  b4:	93 ec       	ldi	r25, 0xC3	; 195
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <Reg_int+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <Reg_int+0x2a>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <App>:

void App()            //Application Function
{
	while (1)
	{
		ultra_triger();           //take a reading
  c0:	0e 94 34 02 	call	0x468	; 0x468 <ultra_triger>
  c4:	8b e4       	ldi	r24, 0x4B	; 75
  c6:	9d e1       	ldi	r25, 0x1D	; 29
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <App+0x8>
  cc:	00 c0       	rjmp	.+0      	; 0xce <App+0xe>
  ce:	00 00       	nop
	    _delay_ms(30);
		
		if (distance<100)
  d0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <distance>
  d4:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <distance+0x1>
  d8:	84 36       	cpi	r24, 0x64	; 100
  da:	91 05       	cpc	r25, r1
  dc:	0c f0       	brlt	.+2      	; 0xe0 <App+0x20>
  de:	5b c0       	rjmp	.+182    	; 0x196 <App+0xd6>
		{
			position_pos();       //rotate sensor right
  e0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <position_pos>
			ultra_triger();       //take a reading
  e4:	0e 94 34 02 	call	0x468	; 0x468 <ultra_triger>
  e8:	9f e5       	ldi	r25, 0x5F	; 95
  ea:	2a ee       	ldi	r18, 0xEA	; 234
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	91 50       	subi	r25, 0x01	; 1
  f0:	20 40       	sbci	r18, 0x00	; 0
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <App+0x2e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <App+0x38>
  f8:	00 00       	nop
			_delay_ms(300);
			if (distance<100)     //if obstacle
  fa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <distance>
  fe:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <distance+0x1>
 102:	84 36       	cpi	r24, 0x64	; 100
 104:	91 05       	cpc	r25, r1
 106:	b4 f5       	brge	.+108    	; 0x174 <App+0xb4>
			{
				position_neg();   //rotate sensor left
 108:	0e 94 08 02 	call	0x410	; 0x410 <position_neg>
				ultra_triger();   //take a reading
 10c:	0e 94 34 02 	call	0x468	; 0x468 <ultra_triger>
 110:	9f e5       	ldi	r25, 0x5F	; 95
 112:	2a ee       	ldi	r18, 0xEA	; 234
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	91 50       	subi	r25, 0x01	; 1
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <App+0x56>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <App+0x60>
 120:	00 00       	nop
				_delay_ms(300);
			    if (distance<100)  //if obstacle
 122:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <distance>
 126:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <distance+0x1>
 12a:	84 36       	cpi	r24, 0x64	; 100
 12c:	91 05       	cpc	r25, r1
 12e:	8c f4       	brge	.+34     	; 0x152 <App+0x92>
			    {
					lcd_clean_screan();
 130:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_clean_screan>
					lcd_display_string("Car Stuck !");
 134:	80 e6       	ldi	r24, 0x60	; 96
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_display_string>
					lcd_go_to_rowcolumn(1,0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_go_to_rowcolumn>
					lcd_display_string("Press Reset But");
 144:	8c e6       	ldi	r24, 0x6C	; 108
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_display_string>
					Car_Stop();    //stop the car
 14c:	0e 94 06 01 	call	0x20c	; 0x20c <Car_Stop>
					return 0;
 150:	08 95       	ret
			    }
				else               //if no obstacle
				{
					lcd_clean_screan();
 152:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_clean_screan>
					lcd_display_string("Rotating left");
 156:	8c e7       	ldi	r24, 0x7C	; 124
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_display_string>
					Rotate_left(); //rotate the car left
 15e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Rotate_left>
					lcd_clean_screan();
 162:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_clean_screan>
					lcd_display_string("Go Forward");
 166:	8a e8       	ldi	r24, 0x8A	; 138
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_display_string>
					position_zero();
 16e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <position_zero>
 172:	a6 cf       	rjmp	.-180    	; 0xc0 <App>
				}
			}
			else
			{
				lcd_clean_screan();  
 174:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_clean_screan>
				lcd_display_string("Rotating Right");
 178:	85 e9       	ldi	r24, 0x95	; 149
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_display_string>
				Rotate_Right();   //rotate the car right
 180:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Rotate_Right>
				lcd_clean_screan();
 184:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_clean_screan>
				lcd_display_string("Go Forward");
 188:	8a e8       	ldi	r24, 0x8A	; 138
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_display_string>
				position_zero();
 190:	0e 94 d6 01 	call	0x3ac	; 0x3ac <position_zero>
 194:	95 cf       	rjmp	.-214    	; 0xc0 <App>
			}
		}
        else    //continue moving
		{
			Normal_Speed(); 
 196:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Normal_Speed>
 19a:	92 cf       	rjmp	.-220    	; 0xc0 <App>

0000019c <init_Motor>:
    setbit(TCCR2,WGM20);  //fast PWM mode
    setbit(TCCR2,COM21);  //Clear OC0 on compare match, set OC0 at BOTTOM,
    setbit(TCCR2,CS20);   //clk / 1 (From prescaler)
	OCR2=(127);*/
    
	setbit(DDRB,2);
 19c:	87 b3       	in	r24, 0x17	; 23
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	87 bb       	out	0x17, r24	; 23
    setbit(DDRB,4);
 1a2:	87 b3       	in	r24, 0x17	; 23
 1a4:	80 61       	ori	r24, 0x10	; 16
 1a6:	87 bb       	out	0x17, r24	; 23
	clearbit(PORTB,2);   //initially Car is Stopped
 1a8:	88 b3       	in	r24, 0x18	; 24
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	88 bb       	out	0x18, r24	; 24
	clearbit(PORTB,4);   //initially Car is Stopped
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	08 95       	ret

000001b6 <Normal_Speed>:
}
 
void Normal_Speed()    //Move Car with Normal Speed;
{
    //OCR2=(127);		
    setbit(PORTB,2);
 1b6:	88 b3       	in	r24, 0x18	; 24
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	88 bb       	out	0x18, r24	; 24
    setbit(PORTB,4);
 1bc:	88 b3       	in	r24, 0x18	; 24
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret

000001c4 <Rotate_Right>:
}

void Rotate_Right()    //Rotate Car Right
{
    //OCR2=(1);
	setbit(PORTB,2);
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	88 bb       	out	0x18, r24	; 24
	clearbit(PORTB,4);
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	8f 7e       	andi	r24, 0xEF	; 239
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	83 ed       	ldi	r24, 0xD3	; 211
 1d4:	90 e3       	ldi	r25, 0x30	; 48
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <Rotate_Right+0x12>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <Rotate_Right+0x1c>
 1e0:	00 00       	nop
	_delay_ms(2000);   //wait till car Rotate
	Normal_Speed();
 1e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Normal_Speed>
 1e6:	08 95       	ret

000001e8 <Rotate_left>:
}

void Rotate_left()     //Rotate Car Left
{
	//OCR2=(254);
	setbit(PORTB,4);
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	88 bb       	out	0x18, r24	; 24
	clearbit(PORTB,2);
 1ee:	88 b3       	in	r24, 0x18	; 24
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	83 ed       	ldi	r24, 0xD3	; 211
 1f8:	90 e3       	ldi	r25, 0x30	; 48
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <Rotate_left+0x12>
 202:	00 c0       	rjmp	.+0      	; 0x204 <Rotate_left+0x1c>
 204:	00 00       	nop
    _delay_ms(2000);    //Wait till car rotate
    Normal_Speed();
 206:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Normal_Speed>
 20a:	08 95       	ret

0000020c <Car_Stop>:


void Car_Stop()         //Stop the Car
{
	//OCR2=(127);
	clearbit(PORTB,2);
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	8b 7f       	andi	r24, 0xFB	; 251
 210:	88 bb       	out	0x18, r24	; 24
	clearbit(PORTB,4);
 212:	88 b3       	in	r24, 0x18	; 24
 214:	8f 7e       	andi	r24, 0xEF	; 239
 216:	88 bb       	out	0x18, r24	; 24
 218:	08 95       	ret

0000021a <lcd_sendcommand>:

void lcd_into_string(int32 data){
	Int8 buff[16];            //string to hold ascii result
	itoa(data,buff,10);       //10 for decimal
	lcd_display_string(buff); // display output
}
 21a:	95 b3       	in	r25, 0x15	; 21
 21c:	9d 7f       	andi	r25, 0xFD	; 253
 21e:	95 bb       	out	0x15, r25	; 21
 220:	95 b3       	in	r25, 0x15	; 21
 222:	9b 7f       	andi	r25, 0xFB	; 251
 224:	95 bb       	out	0x15, r25	; 21
 226:	95 b3       	in	r25, 0x15	; 21
 228:	98 60       	ori	r25, 0x08	; 8
 22a:	95 bb       	out	0x15, r25	; 21
 22c:	ef ec       	ldi	r30, 0xCF	; 207
 22e:	f7 e0       	ldi	r31, 0x07	; 7
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_sendcommand+0x16>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_sendcommand+0x1c>
 236:	00 00       	nop
 238:	98 2f       	mov	r25, r24
 23a:	90 7f       	andi	r25, 0xF0	; 240
 23c:	9b bb       	out	0x1b, r25	; 27
 23e:	ef ec       	ldi	r30, 0xCF	; 207
 240:	f7 e0       	ldi	r31, 0x07	; 7
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_sendcommand+0x28>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_sendcommand+0x2e>
 248:	00 00       	nop
 24a:	95 b3       	in	r25, 0x15	; 21
 24c:	97 7f       	andi	r25, 0xF7	; 247
 24e:	95 bb       	out	0x15, r25	; 21
 250:	ef ec       	ldi	r30, 0xCF	; 207
 252:	f7 e0       	ldi	r31, 0x07	; 7
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_sendcommand+0x3a>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_sendcommand+0x40>
 25a:	00 00       	nop
 25c:	95 b3       	in	r25, 0x15	; 21
 25e:	98 60       	ori	r25, 0x08	; 8
 260:	95 bb       	out	0x15, r25	; 21
 262:	ef ec       	ldi	r30, 0xCF	; 207
 264:	f7 e0       	ldi	r31, 0x07	; 7
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_sendcommand+0x4c>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_sendcommand+0x52>
 26c:	00 00       	nop
 26e:	f0 e1       	ldi	r31, 0x10	; 16
 270:	8f 9f       	mul	r24, r31
 272:	c0 01       	movw	r24, r0
 274:	11 24       	eor	r1, r1
 276:	8b bb       	out	0x1b, r24	; 27
 278:	8f ec       	ldi	r24, 0xCF	; 207
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_sendcommand+0x62>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_sendcommand+0x68>
 282:	00 00       	nop
 284:	85 b3       	in	r24, 0x15	; 21
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	85 bb       	out	0x15, r24	; 21
 28a:	ef ec       	ldi	r30, 0xCF	; 207
 28c:	f7 e0       	ldi	r31, 0x07	; 7
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_sendcommand+0x74>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_sendcommand+0x7a>
 294:	00 00       	nop
 296:	08 95       	ret

00000298 <lcd_init>:
 298:	84 b3       	in	r24, 0x14	; 20
 29a:	82 60       	ori	r24, 0x02	; 2
 29c:	84 bb       	out	0x14, r24	; 20
 29e:	84 b3       	in	r24, 0x14	; 20
 2a0:	84 60       	ori	r24, 0x04	; 4
 2a2:	84 bb       	out	0x14, r24	; 20
 2a4:	84 b3       	in	r24, 0x14	; 20
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	84 bb       	out	0x14, r24	; 20
 2aa:	8a b3       	in	r24, 0x1a	; 26
 2ac:	80 6f       	ori	r24, 0xF0	; 240
 2ae:	8a bb       	out	0x1a, r24	; 26
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_sendcommand>
 2b6:	88 e2       	ldi	r24, 0x28	; 40
 2b8:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_sendcommand>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_sendcommand>
 2c2:	8c e0       	ldi	r24, 0x0C	; 12
 2c4:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_sendcommand>
 2c8:	08 95       	ret

000002ca <lcd_display_char>:
 2ca:	95 b3       	in	r25, 0x15	; 21
 2cc:	92 60       	ori	r25, 0x02	; 2
 2ce:	95 bb       	out	0x15, r25	; 21
 2d0:	95 b3       	in	r25, 0x15	; 21
 2d2:	9b 7f       	andi	r25, 0xFB	; 251
 2d4:	95 bb       	out	0x15, r25	; 21
 2d6:	95 b3       	in	r25, 0x15	; 21
 2d8:	98 60       	ori	r25, 0x08	; 8
 2da:	95 bb       	out	0x15, r25	; 21
 2dc:	ef ec       	ldi	r30, 0xCF	; 207
 2de:	f7 e0       	ldi	r31, 0x07	; 7
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_display_char+0x16>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lcd_display_char+0x1c>
 2e6:	00 00       	nop
 2e8:	98 2f       	mov	r25, r24
 2ea:	90 7f       	andi	r25, 0xF0	; 240
 2ec:	9b bb       	out	0x1b, r25	; 27
 2ee:	ef ec       	ldi	r30, 0xCF	; 207
 2f0:	f7 e0       	ldi	r31, 0x07	; 7
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <lcd_display_char+0x28>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <lcd_display_char+0x2e>
 2f8:	00 00       	nop
 2fa:	95 b3       	in	r25, 0x15	; 21
 2fc:	97 7f       	andi	r25, 0xF7	; 247
 2fe:	95 bb       	out	0x15, r25	; 21
 300:	ef ec       	ldi	r30, 0xCF	; 207
 302:	f7 e0       	ldi	r31, 0x07	; 7
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <lcd_display_char+0x3a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <lcd_display_char+0x40>
 30a:	00 00       	nop
 30c:	95 b3       	in	r25, 0x15	; 21
 30e:	98 60       	ori	r25, 0x08	; 8
 310:	95 bb       	out	0x15, r25	; 21
 312:	ef ec       	ldi	r30, 0xCF	; 207
 314:	f7 e0       	ldi	r31, 0x07	; 7
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <lcd_display_char+0x4c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <lcd_display_char+0x52>
 31c:	00 00       	nop
 31e:	f0 e1       	ldi	r31, 0x10	; 16
 320:	8f 9f       	mul	r24, r31
 322:	c0 01       	movw	r24, r0
 324:	11 24       	eor	r1, r1
 326:	8b bb       	out	0x1b, r24	; 27
 328:	8f ec       	ldi	r24, 0xCF	; 207
 32a:	97 e0       	ldi	r25, 0x07	; 7
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_display_char+0x62>
 330:	00 c0       	rjmp	.+0      	; 0x332 <lcd_display_char+0x68>
 332:	00 00       	nop
 334:	85 b3       	in	r24, 0x15	; 21
 336:	87 7f       	andi	r24, 0xF7	; 247
 338:	85 bb       	out	0x15, r24	; 21
 33a:	ef ec       	ldi	r30, 0xCF	; 207
 33c:	f7 e0       	ldi	r31, 0x07	; 7
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_display_char+0x74>
 342:	00 c0       	rjmp	.+0      	; 0x344 <lcd_display_char+0x7a>
 344:	00 00       	nop
 346:	08 95       	ret

00000348 <lcd_display_string>:
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	8c 01       	movw	r16, r24
 350:	c0 e0       	ldi	r28, 0x00	; 0
 352:	03 c0       	rjmp	.+6      	; 0x35a <lcd_display_string+0x12>
 354:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_display_char>
 358:	cf 5f       	subi	r28, 0xFF	; 255
 35a:	f8 01       	movw	r30, r16
 35c:	ec 0f       	add	r30, r28
 35e:	f1 1d       	adc	r31, r1
 360:	80 81       	ld	r24, Z
 362:	81 11       	cpse	r24, r1
 364:	f7 cf       	rjmp	.-18     	; 0x354 <lcd_display_string+0xc>
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <lcd_clean_screan>:

void lcd_clean_screan(){
	
	lcd_sendcommand(clear_command);  //clear display
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_sendcommand>
 374:	08 95       	ret

00000376 <lcd_go_to_rowcolumn>:
}

void lcd_go_to_rowcolumn(uint8 row,uint8 col){
   uint8 address;
  //Get which addres you want depend on row
switch(row){
 376:	88 23       	and	r24, r24
 378:	29 f0       	breq	.+10     	; 0x384 <lcd_go_to_rowcolumn+0xe>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	21 f4       	brne	.+8      	; 0x386 <lcd_go_to_rowcolumn+0x10>
	case 0: 
	address=col;
	break;
	case 1:
	address=col+0x40;
 37e:	90 e4       	ldi	r25, 0x40	; 64
 380:	96 0f       	add	r25, r22
	break;
 382:	01 c0       	rjmp	.+2      	; 0x386 <lcd_go_to_rowcolumn+0x10>
void lcd_go_to_rowcolumn(uint8 row,uint8 col){
   uint8 address;
  //Get which addres you want depend on row
switch(row){
	case 0: 
	address=col;
 384:	96 2f       	mov	r25, r22
	address=col+0x40;
	break;
}
/* to write to a specific address in the LCD 
we need to apply the corresponding command 0b10000000+Address */
lcd_sendcommand(address + set_cruser_location);	
 386:	80 e8       	ldi	r24, 0x80	; 128
 388:	89 0f       	add	r24, r25
 38a:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_sendcommand>
 38e:	08 95       	ret

00000390 <main>:
#include "App.h"

int main(){

	sei();          //Global interrupts enable
 390:	78 94       	sei
    Reg_int();      //Initialize registers
 392:	0e 94 49 00 	call	0x92	; 0x92 <Reg_int>
 396:	83 ec       	ldi	r24, 0xC3	; 195
 398:	99 e0       	ldi	r25, 0x09	; 9
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0xa>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x10>
 3a0:	00 00       	nop
    _delay_ms(10);  //wait
	
	App();          //Application Start
 3a2:	0e 94 60 00 	call	0xc0	; 0xc0 <App>

	return 0;
}
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret

000003ac <position_zero>:
	position_zero();        //initial position is zero
}

void position_zero(void)      //Function to lock the door
{
	OCR1A = 1500;             //1.5msec   0 degree
 3ac:	8c ed       	ldi	r24, 0xDC	; 220
 3ae:	95 e0       	ldi	r25, 0x05	; 5
 3b0:	9b bd       	out	0x2b, r25	; 43
 3b2:	8a bd       	out	0x2a, r24	; 42
 3b4:	2f e3       	ldi	r18, 0x3F	; 63
 3b6:	82 e4       	ldi	r24, 0x42	; 66
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <position_zero+0xe>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <position_zero+0x18>
 3c4:	00 00       	nop
 3c6:	08 95       	ret

000003c8 <init_servo>:
#include "Servo.h"

void init_servo(void)       //initialize timer value
{
	setbit(TCCR1A,COM1A1);  //  Clear OC1A/OC1B on compare match, set OC1A at BOTTOM (non-inverting mode)
 3c8:	8f b5       	in	r24, 0x2f	; 47
 3ca:	80 68       	ori	r24, 0x80	; 128
 3cc:	8f bd       	out	0x2f, r24	; 47
	setbit(TCCR1A,WGM11);   //  Set fast PWM with the TOP in ICR1
 3ce:	8f b5       	in	r24, 0x2f	; 47
 3d0:	82 60       	ori	r24, 0x02	; 2
 3d2:	8f bd       	out	0x2f, r24	; 47
	setbit(TCCR1B,WGM12);   //  Set fast PWM with the TOP in ICR1
 3d4:	8e b5       	in	r24, 0x2e	; 46
 3d6:	88 60       	ori	r24, 0x08	; 8
 3d8:	8e bd       	out	0x2e, r24	; 46
    setbit(TCCR1B,WGM13);   //  Set fast PWM with the TOP in ICR1
 3da:	8e b5       	in	r24, 0x2e	; 46
 3dc:	80 61       	ori	r24, 0x10	; 16
 3de:	8e bd       	out	0x2e, r24	; 46
	setbit(TCCR1B,CS11);    //  Pre scaler / 8
 3e0:	8e b5       	in	r24, 0x2e	; 46
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	8e bd       	out	0x2e, r24	; 46
    ICR1=20000;             //20msec timer Periodic Time
 3e6:	80 e2       	ldi	r24, 0x20	; 32
 3e8:	9e e4       	ldi	r25, 0x4E	; 78
 3ea:	97 bd       	out	0x27, r25	; 39
 3ec:	86 bd       	out	0x26, r24	; 38
	position_zero();        //initial position is zero
 3ee:	0e 94 d6 01 	call	0x3ac	; 0x3ac <position_zero>
 3f2:	08 95       	ret

000003f4 <position_pos>:
	_delay_ms(5000);          //Wait till servo rotate
}

void position_pos(void)        //Function to unlock the door
{ 
	OCR1A = 2000;              //2msec  +90 degree
 3f4:	80 ed       	ldi	r24, 0xD0	; 208
 3f6:	97 e0       	ldi	r25, 0x07	; 7
 3f8:	9b bd       	out	0x2b, r25	; 43
 3fa:	8a bd       	out	0x2a, r24	; 42
 3fc:	2f e3       	ldi	r18, 0x3F	; 63
 3fe:	82 e4       	ldi	r24, 0x42	; 66
 400:	9f e0       	ldi	r25, 0x0F	; 15
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	08 95       	ret

00000410 <position_neg>:
	_delay_ms(5000);           //Wait till servo rotate
}

void position_neg(void)      //Function to lock the door
{
	OCR1A = 1000;            //1msec  -90 degree
 410:	88 ee       	ldi	r24, 0xE8	; 232
 412:	93 e0       	ldi	r25, 0x03	; 3
 414:	9b bd       	out	0x2b, r25	; 43
 416:	8a bd       	out	0x2a, r24	; 42
 418:	2f e3       	ldi	r18, 0x3F	; 63
 41a:	82 e4       	ldi	r24, 0x42	; 66
 41c:	9f e0       	ldi	r25, 0x0F	; 15
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <position_neg+0xe>
 426:	00 c0       	rjmp	.+0      	; 0x428 <position_neg+0x18>
 428:	00 00       	nop
 42a:	08 95       	ret

0000042c <timer0_init>:
uint32_t distance;
//uint8_t distance_str[10];

void timer0_init(void)  //initialize Timer 0
{
	TCCR0 =  0x00;      //Disable Timer 0
 42c:	13 be       	out	0x33, r1	; 51
	setbit(TCCR0,0);    //Setting pre scaler /1
 42e:	83 b7       	in	r24, 0x33	; 51
 430:	81 60       	ori	r24, 0x01	; 1
 432:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;       // Initializing the timer with zero 
 434:	12 be       	out	0x32, r1	; 50
	setbit(TIMSK,0);    // Timer overflow interrupt enable
 436:	89 b7       	in	r24, 0x39	; 57
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	89 bf       	out	0x39, r24	; 57
 43c:	08 95       	ret

0000043e <enable_ex_interrupt>:
    timer0_init();        //initialize Timer 0
}

void enable_ex_interrupt(void)   //Interrupt enable
{
  MCUCR |= (1<<ISC10);   		// Trigger INT1 on any logic change.
 43e:	85 b7       	in	r24, 0x35	; 53
 440:	84 60       	ori	r24, 0x04	; 4
 442:	85 bf       	out	0x35, r24	; 53
  GICR  |= (1<<INT1);			// Enable INT1 interrupts.
 444:	8b b7       	in	r24, 0x3b	; 59
 446:	80 68       	ori	r24, 0x80	; 128
 448:	8b bf       	out	0x3b, r24	; 59
 44a:	08 95       	ret

0000044c <ultrasonic_init>:
	setbit(TIMSK,0);    // Timer overflow interrupt enable
}

void ultrasonic_init(void)  //initialize UltraSonic
{
    setbit(DDRD,0);       // output trigger
 44c:	81 b3       	in	r24, 0x11	; 17
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	81 bb       	out	0x11, r24	; 17
    clearbit(DDRD,3);     // input of echo
 452:	81 b3       	in	r24, 0x11	; 17
 454:	87 7f       	andi	r24, 0xF7	; 247
 456:	81 bb       	out	0x11, r24	; 17
    setbit(PORTD,3);
 458:	82 b3       	in	r24, 0x12	; 18
 45a:	88 60       	ori	r24, 0x08	; 8
 45c:	82 bb       	out	0x12, r24	; 18
    enable_ex_interrupt();//Interrupt enable
 45e:	0e 94 1f 02 	call	0x43e	; 0x43e <enable_ex_interrupt>
    timer0_init();        //initialize Timer 0
 462:	0e 94 16 02 	call	0x42c	; 0x42c <timer0_init>
 466:	08 95       	ret

00000468 <ultra_triger>:
  MCUCR |= (1<<ISC10);   		// Trigger INT1 on any logic change.
  GICR  |= (1<<INT1);			// Enable INT1 interrupts.
}

void ultra_triger(void){     //trigger Sensor
  if(!sensor_working){
 468:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <sensor_working>
 46c:	81 11       	cpse	r24, r1
 46e:	0c c0       	rjmp	.+24     	; 0x488 <ultra_triger+0x20>
    setbit(PORTD,0);    //trigger for 15 micro sec
 470:	82 b3       	in	r24, 0x12	; 18
 472:	81 60       	ori	r24, 0x01	; 1
 474:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 476:	88 e2       	ldi	r24, 0x28	; 40
 478:	8a 95       	dec	r24
 47a:	f1 f7       	brne	.-4      	; 0x478 <ultra_triger+0x10>
	_delay_us(15);
    clearbit(PORTD,0);
 47c:	82 b3       	in	r24, 0x12	; 18
 47e:	8e 7f       	andi	r24, 0xFE	; 254
 480:	82 bb       	out	0x12, r24	; 18
    sensor_working=1;   // can't trigger till current operation end
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <sensor_working>
 488:	08 95       	ret

0000048a <__vector_2>:
  }
}

ISR(INT1_vect){
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	4f 93       	push	r20
 49a:	5f 93       	push	r21
 49c:	6f 93       	push	r22
 49e:	7f 93       	push	r23
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	af 93       	push	r26
 4a6:	bf 93       	push	r27
 4a8:	ef 93       	push	r30
 4aa:	ff 93       	push	r31
  if(sensor_working==1){
 4ac:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <sensor_working>
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__vector_2+0x2c>
 4b4:	45 c0       	rjmp	.+138    	; 0x540 <__vector_2+0xb6>
    if(rising_edge==0){
 4b6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <rising_edge>
 4ba:	81 11       	cpse	r24, r1
 4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <__vector_2+0x4e>
      TCNT0=0x00;
 4be:	12 be       	out	0x32, r1	; 50
      rising_edge=1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <rising_edge>
      timer_counter=0;
 4c6:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
 4ca:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__data_end+0x1>
 4ce:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end+0x2>
 4d2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x3>
 4d6:	34 c0       	rjmp	.+104    	; 0x540 <__vector_2+0xb6>
    }
  else{
    distance=(timer_counter*256+TCNT0)/466;
 4d8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 4dc:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 4e0:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <__data_end+0x2>
 4e4:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <__data_end+0x3>
 4e8:	ba 2f       	mov	r27, r26
 4ea:	a9 2f       	mov	r26, r25
 4ec:	98 2f       	mov	r25, r24
 4ee:	88 27       	eor	r24, r24
 4f0:	22 b7       	in	r18, 0x32	; 50
 4f2:	bc 01       	movw	r22, r24
 4f4:	cd 01       	movw	r24, r26
 4f6:	62 0f       	add	r22, r18
 4f8:	71 1d       	adc	r23, r1
 4fa:	81 1d       	adc	r24, r1
 4fc:	91 1d       	adc	r25, r1
 4fe:	22 ed       	ldi	r18, 0xD2	; 210
 500:	31 e0       	ldi	r19, 0x01	; 1
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__udivmodsi4>
 50a:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <distance>
 50e:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <distance+0x1>
 512:	40 93 ac 00 	sts	0x00AC, r20	; 0x8000ac <distance+0x2>
 516:	50 93 ad 00 	sts	0x00AD, r21	; 0x8000ad <distance+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	89 ef       	ldi	r24, 0xF9	; 249
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <__vector_2+0x96>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__vector_2+0xa0>
 52a:	00 00       	nop
    /*lcd_go_to_rowcolumn(1,0);
  	itoa(distance,distance_str,10);
  	strcat(distance_str, " cm ");
  	lcd_display_string(distance_str);*/
	  _delay_ms(40);
    timer_counter=0;
 52c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
 530:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__data_end+0x1>
 534:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end+0x2>
 538:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x3>
    rising_edge=0;
 53c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <rising_edge>
  }
}}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_11>:

ISR(TIMER0_OVF_vect){
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
    timer_counter++;
 576:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 57a:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 57e:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <__data_end+0x2>
 582:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <__data_end+0x3>
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	a1 1d       	adc	r26, r1
 58a:	b1 1d       	adc	r27, r1
 58c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
 590:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x1>
 594:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <__data_end+0x2>
 598:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <__data_end+0x3>
    if(timer_counter >730){
 59c:	8b 3d       	cpi	r24, 0xDB	; 219
 59e:	92 40       	sbci	r25, 0x02	; 2
 5a0:	a1 05       	cpc	r26, r1
 5a2:	b1 05       	cpc	r27, r1
 5a4:	68 f0       	brcs	.+26     	; 0x5c0 <__vector_11+0x5e>
      TCNT0=0x00;
 5a6:	12 be       	out	0x32, r1	; 50
      sensor_working=0;
 5a8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <sensor_working>
      rising_edge=0;
 5ac:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <rising_edge>
      timer_counter=0;
 5b0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
 5b4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__data_end+0x1>
 5b8:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end+0x2>
 5bc:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x3>
    }
}
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	2f 91       	pop	r18
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <__udivmodsi4>:
 5d4:	a1 e2       	ldi	r26, 0x21	; 33
 5d6:	1a 2e       	mov	r1, r26
 5d8:	aa 1b       	sub	r26, r26
 5da:	bb 1b       	sub	r27, r27
 5dc:	fd 01       	movw	r30, r26
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <__udivmodsi4_ep>

000005e0 <__udivmodsi4_loop>:
 5e0:	aa 1f       	adc	r26, r26
 5e2:	bb 1f       	adc	r27, r27
 5e4:	ee 1f       	adc	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	a2 17       	cp	r26, r18
 5ea:	b3 07       	cpc	r27, r19
 5ec:	e4 07       	cpc	r30, r20
 5ee:	f5 07       	cpc	r31, r21
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__udivmodsi4_ep>
 5f2:	a2 1b       	sub	r26, r18
 5f4:	b3 0b       	sbc	r27, r19
 5f6:	e4 0b       	sbc	r30, r20
 5f8:	f5 0b       	sbc	r31, r21

000005fa <__udivmodsi4_ep>:
 5fa:	66 1f       	adc	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	1a 94       	dec	r1
 604:	69 f7       	brne	.-38     	; 0x5e0 <__udivmodsi4_loop>
 606:	60 95       	com	r22
 608:	70 95       	com	r23
 60a:	80 95       	com	r24
 60c:	90 95       	com	r25
 60e:	9b 01       	movw	r18, r22
 610:	ac 01       	movw	r20, r24
 612:	bd 01       	movw	r22, r26
 614:	cf 01       	movw	r24, r30
 616:	08 95       	ret

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
